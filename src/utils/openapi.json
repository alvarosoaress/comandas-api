{
  "openapi": "3.0.0",
  "info": {
    "title": "Comandas app REST API Docs",
    "version": "1.1"
  },
  "security": [
    {
      "appApiKey": [],
      "adminBearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Address",
      "description": "Operations about address"
    },
    {
      "name": "User",
      "description": "Operations about user"
    },
    {
      "name": "GeneralCategory",
      "description": "Operations about general category for shops"
    },
    {
      "name": "ItemCategory",
      "description": "Operations about item category for items"
    },
    {
      "name": "Shop",
      "description": "Operations about shop"
    },
    {
      "name": "Customer",
      "description": "Operations about customer"
    },
    {
      "name": "Item",
      "description": "Operations about item"
    },
    {
      "name": "QrCode",
      "description": "Operations about qrCode"
    },
    {
      "name": "Order",
      "description": "Operations about order"
    },
    {
      "name": "Schedule",
      "description": "Operations about schedule"
    },
    {
      "name": "Review",
      "description": "Operations about shop reviews"
    }
  ],
  "paths": {
    "/address/create": {
      "post": {
        "tags": ["Address"],
        "summary": "Create a new address",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressCreateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Address created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressCreateRes"
                }
              }
            }
          },
          "409": {
            "description": "Address already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/address/list": {
      "get": {
        "security": [
          {
            "appApiKey": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["Address"],
        "summary": "List all addresses",
        "responses": {
          "200": {
            "description": "Addresses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressListRes"
                }
              }
            }
          },
          "404": {
            "description": "No addresses not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/address/{addressId}": {
      "get": {
        "security": [
          {
            "appApiKey": [],
            "shopBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["Address"],
        "summary": "Get a specific address",
        "parameters": [
          {
            "in": "path",
            "name": "addressId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the address to get."
          }
        ],
        "responses": {
          "200": {
            "description": "Address found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressGetRes"
                }
              }
            }
          },
          "404": {
            "description": "Address not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/address/update": {
      "put": {
        "security": [
          {
            "appApiKey": [],
            "shopBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["Address"],
        "summary": "Update address",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressUpdateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Address updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUpdateRes"
                }
              }
            }
          },
          "404": {
            "description": "Address not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/user/list": {
      "get": {
        "security": [
          {
            "appApiKey": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["User"],
        "summary": "List all users",
        "responses": {
          "200": {
            "description": "users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListRes"
                }
              }
            }
          },
          "404": {
            "description": "No users not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/user/{userId}": {
      "get": {
        "tags": ["User"],
        "summary": "Get a specific user",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the user to get."
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/UserGetShopRes"
                    },
                    {
                      "$ref": "#/components/schemas/UserGetCustomerRes"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": ["User"],
        "summary": "Login a user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLoginSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLoginRes"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "Credentials do not match",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/user/update": {
      "put": {
        "security": [
          {
            "appApiKey": [],
            "customerBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["User"],
        "summary": "Update user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdateRes"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/user/updatetoken": {
      "put": {
        "security": [
          {
            "appApiKey": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["User"],
        "summary": "Update user access token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateTokenSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User access token updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdateTokenRes"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "Refresh token expried OR Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/generalcategory/create": {
      "post": {
        "security": [
          {
            "appApiKey": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["GeneralCategory"],
        "summary": "Create a new general category",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneralCategoryCreateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "General category created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralCategoryCreateRes"
                }
              }
            }
          },
          "409": {
            "description": "General category already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/generalcategory/list": {
      "get": {
        "tags": ["GeneralCategory"],
        "summary": "Get all general categories",
        "responses": {
          "200": {
            "description": "General categories found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralCategoryListRes"
                }
              }
            }
          },
          "404": {
            "description": "General category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/generalcategory/{generalCategoryId}": {
      "get": {
        "tags": ["GeneralCategory"],
        "summary": "Get a specific general category",
        "parameters": [
          {
            "in": "path",
            "name": "generalCategoryId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the general category to get."
          }
        ],
        "responses": {
          "200": {
            "description": "General category found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralCategoryGetRes"
                }
              }
            }
          },
          "404": {
            "description": "General category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/generalcategory/update": {
      "put": {
        "security": [
          {
            "appApiKey": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["GeneralCategory"],
        "summary": "Updates a general category",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneralCategoryUpdateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "General category updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralCategoryUpdateRes"
                }
              }
            }
          },
          "404": {
            "description": "General category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/generalcategory/delete/{generalCategoryId}": {
      "delete": {
        "security": [
          {
            "appApiKey": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["GeneralCategory"],
        "summary": "Delete a specific general category",
        "parameters": [
          {
            "in": "path",
            "name": "generalCategoryId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the general category to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "General category deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralCategoryDeleteRes"
                }
              }
            }
          },
          "404": {
            "description": "General category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/generalcategory/set": {
      "put": {
        "security": [
          {
            "appApiKey": [],
            "shopBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["GeneralCategory"],
        "summary": "Set general categories for specific shop",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneralCategorySetSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "General categories settled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralCategorySetRes"
                }
              }
            }
          },
          "404": {
            "description": "General category not found OR Shop not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/generalcategory/remove": {
      "put": {
        "security": [
          {
            "appApiKey": [],
            "shopBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["GeneralCategory"],
        "summary": "Remove general categories for specific shop",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneralCategoryRemoveSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "General categories removed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralCategoryRemoveRes"
                }
              }
            }
          },
          "404": {
            "description": "General category not found OR Shop not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/generalcategory/shop/{shopId}": {
      "get": {
        "tags": ["GeneralCategory"],
        "summary": "Get all general categories from a specific shop",
        "parameters": [
          {
            "in": "path",
            "name": "shopId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the shop to get general categories."
          }
        ],
        "responses": {
          "200": {
            "description": "General categories found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralCategoryShopListRes"
                }
              }
            }
          },
          "404": {
            "description": "Shop not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/itemcategory/create": {
      "post": {
        "security": [
          {
            "appApiKey": [],
            "shopBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["ItemCategory"],
        "summary": "Create a new item category",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemCategoryCreateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item category created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCategoryCreateRes"
                }
              }
            }
          },
          "404": {
            "description": "Shop not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Item category already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/itemcategory/{itemCategoryId}": {
      "get": {
        "tags": ["ItemCategory"],
        "summary": "Get a specific item category",
        "parameters": [
          {
            "in": "path",
            "name": "itemCategoryId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the item category to get."
          }
        ],
        "responses": {
          "200": {
            "description": "Item category found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCategoryGetRes"
                }
              }
            }
          },
          "404": {
            "description": "Item category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/itemcategory/list": {
      "get": {
        "security": [
          {
            "appApiKey": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["ItemCategory"],
        "summary": "Get all item categories",
        "responses": {
          "200": {
            "description": "Item categories found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCategoryListRes"
                }
              }
            }
          },
          "404": {
            "description": "Item category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/itemcategory/set": {
      "put": {
        "security": [
          {
            "appApiKey": [],
            "shopBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["ItemCategory"],
        "summary": "Set item category for specific item",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemCategorySetSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item category settled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCategorySetRes"
                }
              }
            }
          },
          "404": {
            "description": "Item category not found OR Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/itemcategory/remove": {
      "delete": {
        "security": [
          {
            "appApiKey": [],
            "shopBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["ItemCategory"],
        "summary": "Remove item category for specific item",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemCategoryRemoveSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item category removed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCategoryRemoveRes"
                }
              }
            }
          },
          "404": {
            "description": "Item category not found OR Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/customer/create": {
      "post": {
        "tags": ["Customer"],
        "summary": "Create a new customer",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCreateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCreateRes"
                }
              }
            }
          },
          "409": {
            "description": "Customer already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/customer/list": {
      "get": {
        "security": [
          {
            "appApiKey": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["Customer"],
        "summary": "List all customers",
        "responses": {
          "200": {
            "description": "Customers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerListRes"
                }
              }
            }
          },
          "404": {
            "description": "Customers not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/customer/update": {
      "put": {
        "security": [
          {
            "appApiKey": [],
            "customerBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["Customer"],
        "summary": "Update a specific customer",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerUpdateRes"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/customer/{customerId}/order": {
      "get": {
        "security": [
          {
            "appApiKey": [],
            "customerBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["Customer"],
        "summary": "Get all open and closed orders belonging to customerid",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Customer ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Customer orders found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerGetOrderRes"
                }
              }
            }
          },
          "404": {
            "description": "Customer not foud OR Customer has no orders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/shop/create": {
      "post": {
        "security": [
          {
            "appApiKey": []
          }
        ],
        "tags": ["Shop"],
        "summary": "Create a new shop",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShopCreateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Shop created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShopCreateRes"
                }
              }
            }
          },
          "409": {
            "description": "Shop already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/shop/list": {
      "get": {
        "security": [
          {
            "appApiKey": []
          }
        ],
        "tags": ["Shop"],
        "summary": "Get all the shops with query options",
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string",
              "example": "veneza"
            },
            "required": false,
            "description": "Search for shop name, general category, street, city or neighborhood in that order."
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "example": 3
            },
            "required": false,
            "description": "Amount of shops."
          },
          {
            "in": "query",
            "name": "state",
            "schema": {
              "type": "string",
              "example": "virgulini"
            },
            "required": false,
            "description": "State which shop is located about."
          },
          {
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "example": "brazil"
            },
            "required": false,
            "description": "Country which shop is located about."
          },
          {
            "in": "query",
            "name": "city",
            "schema": {
              "type": "string",
              "example": "veneza"
            },
            "required": false,
            "description": "City which shop is located about."
          },
          {
            "in": "query",
            "name": "tables",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "required": false,
            "description": "Exact quantity of tables."
          },
          {
            "in": "query",
            "name": "mintables",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "required": false,
            "description": "Minimum quantity of tables."
          },
          {
            "in": "query",
            "name": "maxtables",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "required": false,
            "description": "Maximum quantity of tables."
          },
          {
            "in": "query",
            "name": "categories",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "example": 1
              }
            },
            "required": false,
            "description": "Shops with specific general categories."
          }
        ],
        "responses": {
          "200": {
            "description": "Shop menu found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShopListRes"
                }
              }
            }
          },
          "404": {
            "description": "No shops not foud",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/shop/{shopId}/menu": {
      "get": {
        "security": [
          {
            "appApiKey": []
          }
        ],
        "tags": ["Shop"],
        "summary": "Get menu from shop id",
        "parameters": [
          {
            "in": "path",
            "name": "shopId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Shop ID of the menu to get."
          }
        ],
        "responses": {
          "200": {
            "description": "Shop menu found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShopGetMenuRes"
                }
              }
            }
          },
          "404": {
            "description": "Shop not foud OR Shop has no menu",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/shop/{shopId}/qrcode": {
      "get": {
        "security": [
          {
            "appApiKey": []
          }
        ],
        "tags": ["Shop"],
        "summary": "Get qrCodes belonging to shop id",
        "parameters": [
          {
            "in": "path",
            "name": "shopId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Shop ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Shop qrCodes found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShopGetQrCodeRes"
                }
              }
            }
          },
          "404": {
            "description": "Shop not foud OR Shop has no qrCodes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/shop/{shopId}/itemcategory": {
      "get": {
        "security": [
          {
            "appApiKey": []
          }
        ],
        "tags": ["Shop"],
        "summary": "Get item categories belonging to shop id",
        "parameters": [
          {
            "in": "path",
            "name": "shopId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Shop ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Shop item categories found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShopGetItemCategoryRes"
                }
              }
            }
          },
          "404": {
            "description": "Shop not foud OR Shop has no item categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/shop/{shopId}/order": {
      "get": {
        "security": [
          {
            "appApiKey": [],
            "shopBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["Shop"],
        "summary": "Get all open and closed orders belonging to shop id",
        "parameters": [
          {
            "in": "path",
            "name": "shopId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Shop ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Shop orders found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShopGetOrderRes"
                }
              }
            }
          },
          "404": {
            "description": "Shop not foud OR Shop has no orders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/shop/{shopId}/schedule": {
      "get": {
        "tags": ["Shop"],
        "summary": "Get the schedule belonging to shop id",
        "parameters": [
          {
            "in": "path",
            "name": "shopId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Shop ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Shop schedule found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShopGetSchedules"
                }
              }
            }
          },
          "404": {
            "description": "Shop not foud OR Shop has no schedule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/shop/{shopId}/review": {
      "get": {
        "tags": ["Shop"],
        "summary": "Get all reviews belonging to shop id",
        "parameters": [
          {
            "in": "path",
            "name": "shopId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Shop ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Shop reivews found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShopGetReviewRes"
                }
              }
            }
          },
          "404": {
            "description": "Shop not foud OR Shop has no reviews",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/shop/update": {
      "put": {
        "security": [
          {
            "appApiKey": [],
            "shopBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["Shop"],
        "summary": "Update a specific shop",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShopUpdateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShopUpdateRes"
                }
              }
            }
          },
          "404": {
            "description": "Shop not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/item/create": {
      "post": {
        "security": [
          {
            "appApiKey": [],
            "shopBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["Item"],
        "summary": "Create a new item",
        "requestBody": {
          "required": true,
          "description": "<h2>This categoryId equal the shop's defined Item Category</h2>",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemCreateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCreateRes"
                }
              }
            }
          },
          "404": {
            "description": "Shop not found OR Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/item/list": {
      "get": {
        "security": [
          {
            "appApiKey": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["Item"],
        "summary": "List all items",
        "responses": {
          "200": {
            "description": "Items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemListRes"
                }
              }
            }
          },
          "404": {
            "description": "No shops not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/item/{itemId}": {
      "get": {
        "tags": ["Item"],
        "summary": "Get a specific item",
        "parameters": [
          {
            "in": "path",
            "name": "itemId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the item to get."
          }
        ],
        "responses": {
          "200": {
            "description": "Item found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemGetRes"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/item/update": {
      "put": {
        "security": [
          {
            "appApiKey": [],
            "shopBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["Item"],
        "summary": "Update a specific item",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemUpdateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemUpadteRes"
                }
              }
            }
          },
          "404": {
            "description": "Item not found OR categoryId not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/item/delete/{itemId}": {
      "delete": {
        "security": [
          {
            "appApiKey": [],
            "shopBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["Item"],
        "summary": "Delete a specific item",
        "parameters": [
          {
            "in": "path",
            "name": "itemId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the Item to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "Item deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemDeleteRes"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/qrcode/create": {
      "post": {
        "security": [
          {
            "appApiKey": [],
            "shopBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["QrCode"],
        "summary": "Create a new qrcode",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QrCodeCreateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "QrCode created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QrCodeCreateRes"
                }
              }
            }
          },
          "404": {
            "description": "Shop not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "QrCode already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/qrcode/list": {
      "get": {
        "security": [
          {
            "appApiKey": [],
            "shopBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["QrCode"],
        "summary": "List all qrCodes",
        "responses": {
          "200": {
            "description": "QrCodes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QrCodeListRes"
                }
              }
            }
          },
          "404": {
            "description": "No QrCodes not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/qrcode/{qrCodeId}": {
      "get": {
        "security": [
          {
            "appApiKey": [],
            "shopBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["QrCode"],
        "summary": "Get a specific qrcode",
        "parameters": [
          {
            "in": "path",
            "name": "qrCodeId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the qrCode to get."
          }
        ],
        "responses": {
          "200": {
            "description": "QrCode found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QrCodeGetRes"
                }
              }
            }
          },
          "404": {
            "description": "QrCode not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/qrcode/delete/{qrCodeId}": {
      "delete": {
        "security": [
          {
            "appApiKey": [],
            "shopBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["QrCode"],
        "summary": "Delete a specific qrcode",
        "parameters": [
          {
            "in": "path",
            "name": "qrCodeId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the qrCode to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "QrCode deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QrCodeDeleteRes"
                }
              }
            }
          },
          "404": {
            "description": "QrCode not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key OR Invalid token OR Token does not have the right privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/order/create": {
      "post": {
        "security": [
          {
            "appApiKey": [],
            "shopBearerAuth": [],
            "customerBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["Order"],
        "summary": "Create a new order",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderCreateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCreateRes"
                }
              }
            }
          },
          "404": {
            "description": "Shop not exists OR Customer not exists OR Item not exists OR Table not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Order for this table id already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/order/list": {
      "get": {
        "security": [
          {
            "appApiKey": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["Order"],
        "summary": "List all orders",
        "responses": {
          "200": {
            "description": "Orders found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderListRes"
                }
              }
            }
          },
          "404": {
            "description": "Orders not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/order/{groupId}": {
      "get": {
        "security": [
          {
            "appApiKey": [],
            "shopBearerAuth": [],
            "customerBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["Order"],
        "summary": "Get a specific order",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "<h2>All the orders have a unique ID and a groupId so they can be put together more easily, we always use the groupId</h2>"
          }
        ],
        "responses": {
          "200": {
            "description": "Order found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderGetRes"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/order/shop/{shopId}/table/{tableId}": {
      "get": {
        "security": [
          {
            "appApiKey": [],
            "shopBearerAuth": [],
            "customerBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["Order"],
        "summary": "Get a specific order by Shop Id and Table Id",
        "parameters": [
          {
            "in": "path",
            "name": "tableId",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "shopId",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Order found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderGetByTableRes"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/order/complete/{groupId}": {
      "post": {
        "security": [
          {
            "appApiKey": [],
            "shopBearerAuth": [],
            "customerBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["Order"],
        "summary": "Complete a specific order",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the order to complete."
          }
        ],
        "responses": {
          "200": {
            "description": "Order completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCompleteRes"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/order/cancel/{groupId}": {
      "delete": {
        "security": [
          {
            "appApiKey": [],
            "shopBearerAuth": [],
            "customerBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["Order"],
        "summary": "Cancel a specific order",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the order to cancel."
          }
        ],
        "responses": {
          "200": {
            "description": "Order cancelled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCancelRes"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/schedule/set": {
      "post": {
        "security": [
          {
            "appApiKey": [],
            "shopBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["Schedule"],
        "summary": "Set a new schedule for a shop",
        "requestBody": {
          "required": true,
          "description": "<h1>It uses a 0 to 6 day schema / The hours is 24 hour style</h1> <br><h2>Sunday = 0 <br> Monday = 1 <br> Tuesday = 2 <br> Wednesday = 3 <br> Thursday = 4 <br> Friday = 5 <br> Saturday = 6</h2>",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleSetSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Schedule settled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleSetRes"
                }
              }
            }
          },
          "404": {
            "description": "Shop not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "400": {
            "description": "Schedule array length is greater than 7 OR Shop IDs are differs along the array OR Schedule day is greater than 6",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/review/create": {
      "post": {
        "security": [
          {
            "appApiKey": [],
            "customerBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["Review"],
        "summary": "Submit a new review for a shop",
        "requestBody": {
          "required": true,
          "description": "<h1>The minimum rating is 1</h1>",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewCreateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Review created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewCreateRes"
                }
              }
            }
          },
          "404": {
            "description": "Shop not exists OR Customer not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/review/update": {
      "put": {
        "security": [
          {
            "appApiKey": [],
            "customerBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["Review"],
        "summary": "Update a review for a shop",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewUpdateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Review updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewUpdateRes"
                }
              }
            }
          },
          "404": {
            "description": "Review not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/review/delete/{reviewId}": {
      "delete": {
        "security": [
          {
            "appApiKey": [],
            "customerBearerAuth": [],
            "adminBearerAuth": []
          }
        ],
        "tags": ["Review"],
        "summary": "Delete a review",
        "parameters": [
          {
            "in": "path",
            "name": "reviewId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the review to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "Review deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewDeleteRes"
                }
              }
            }
          },
          "404": {
            "description": "Review not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "adminBearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Token with admin permissions"
      },
      "appApiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-KEY"
      },
      "shopBearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Token with shop permissions"
      },
      "customerBearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Token with customer permissions"
      }
    },
    "schemas": {
      "AddressCreateSchema": {
        "type": "object",
        "required": ["number", "street", "state", "city", "country"],
        "properties": {
          "number": {
            "type": "integer",
            "example": 71
          },
          "street": {
            "type": "string",
            "example": "Veneza"
          },
          "neighborhood": {
            "type": "string",
            "example": "Virgulini"
          },
          "city": {
            "type": "string",
            "example": "Italia"
          },
          "state": {
            "type": "string",
            "example": "Idont know"
          },
          "country": {
            "type": "string",
            "example": "Brazil"
          },
          "zipcode": {
            "type": "number",
            "example": 35772598
          },
          "lat": {
            "type": "string",
            "example": "35.702206"
          },
          "long": {
            "type": "string",
            "example": "139.774139"
          }
        }
      },
      "AddressCreateRes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "number": {
            "type": "integer",
            "example": 71
          },
          "street": {
            "type": "string",
            "example": "Veneza"
          },
          "neighborhood": {
            "type": "string",
            "example": "Virgulini"
          },
          "city": {
            "type": "string",
            "example": "Italia"
          },
          "state": {
            "type": "string",
            "example": "Idont know"
          },
          "country": {
            "type": "string",
            "example": "Brazil"
          },
          "zipcode": {
            "type": "number",
            "example": 35772598
          },
          "lat": {
            "type": "string",
            "example": "35.702206"
          },
          "long": {
            "type": "string",
            "example": "139.774139"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "AddressGetRes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "number": {
            "type": "integer",
            "example": 71
          },
          "street": {
            "type": "string",
            "example": "Veneza"
          },
          "city": {
            "type": "string",
            "example": "Italia"
          },
          "state": {
            "type": "string",
            "example": "Idont know"
          },
          "country": {
            "type": "string",
            "example": "Brazil"
          },
          "zipcode": {
            "type": "number",
            "example": 35772598
          },
          "lat": {
            "type": "string",
            "example": "35.702206"
          },
          "long": {
            "type": "string",
            "example": "139.774139"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "AddressListRes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "example": 1
            },
            "number": {
              "type": "integer",
              "example": 71
            },
            "street": {
              "type": "string",
              "example": "Veneza"
            },
            "city": {
              "type": "string",
              "example": "Italia"
            },
            "state": {
              "type": "string",
              "example": "Idont know"
            },
            "country": {
              "type": "string",
              "example": "Brazil"
            },
            "zipcode": {
              "type": "number",
              "example": 35772598
            },
            "lat": {
              "type": "string",
              "example": "35.702206"
            },
            "long": {
              "type": "string",
              "example": "139.774139"
            },
            "createdAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            },
            "updatedAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            }
          }
        }
      },
      "AddressUpdateSchema": {
        "type": "object",
        "required": ["id"],
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "number": {
            "type": "integer",
            "example": 71
          },
          "street": {
            "type": "string",
            "example": "Veneza"
          },
          "neighborhood": {
            "type": "string",
            "example": "Virgulini"
          },
          "city": {
            "type": "string",
            "example": "Italia"
          },
          "state": {
            "type": "string",
            "example": "Idont know"
          },
          "country": {
            "type": "string",
            "example": "Brazil"
          },
          "zipcode": {
            "type": "number",
            "example": 35772598
          },
          "lat": {
            "type": "string",
            "example": "35.702206"
          },
          "long": {
            "type": "string",
            "example": "139.774139"
          }
        }
      },
      "AddressUpdateRes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "number": {
            "type": "integer",
            "example": 71
          },
          "street": {
            "type": "string",
            "example": "Veneza"
          },
          "neighborhood": {
            "type": "string",
            "example": "Virgulini"
          },
          "city": {
            "type": "string",
            "example": "Italia"
          },
          "state": {
            "type": "string",
            "example": "Idont know"
          },
          "country": {
            "type": "string",
            "example": "Brazil"
          },
          "zipcode": {
            "type": "number",
            "example": 35772598
          },
          "lat": {
            "type": "string",
            "example": "35.702206"
          },
          "long": {
            "type": "string",
            "example": "139.774139"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "UserListRes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "example": 1
            },
            "name": {
              "type": "string",
              "example": "Fernando Virgulini"
            },
            "email": {
              "type": "string",
              "example": "maquinabeloz@tute.italia"
            },
            "phoneNumber": {
              "type": "number",
              "example": 988887777
            },
            "role": {
              "type": "string",
              "enum": ["customer", "shop"],
              "example": "customer"
            },
            "createdAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            },
            "updatedAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            }
          }
        }
      },
      "UserGetCustomerRes": {
        "type": "object",
        "properties": {
          "photoUrl": {
            "type": "string",
            "example": "Fernando Virgulini"
          },
          "birthday": {
            "type": "string",
            "example": "2002-04-03T00:25:32.189Z"
          },
          "userId": {
            "type": "number",
            "example": 1
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "userInfo": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 1
              },
              "name": {
                "type": "string",
                "example": "Fernando Virgulini"
              },
              "email": {
                "type": "string",
                "example": "maquinabeloz@tute.italia"
              },
              "phoneNumber": {
                "type": "number",
                "example": 988887777
              },
              "role": {
                "type": "string",
                "enum": ["customer", "shop"],
                "default": "customer"
              },
              "createdAt": {
                "type": "string",
                "example": "2023-04-03T00:25:32.189Z"
              },
              "updatedAt": {
                "type": "string",
                "example": "2023-04-03T00:25:32.189Z"
              }
            }
          }
        }
      },
      "UserGetShopRes": {
        "type": "object",
        "properties": {
          "tables": {
            "type": "integer",
            "example": 8
          },
          "userId": {
            "type": "integer",
            "example": 1
          },
          "addressId": {
            "type": "integer",
            "example": 1
          },
          "photoUrl": {
            "type": "string",
            "example": "www.somecat.picture"
          },
          "rating": {
            "type": "integer",
            "example": 4.58
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "example": "Pizzaria"
                }
              }
            }
          },
          "userInfo": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 1
              },
              "name": {
                "type": "string",
                "example": "Fernando Virgulini"
              },
              "email": {
                "type": "string",
                "example": "maquinabeloz@tute.italia"
              },
              "phoneNumber": {
                "type": "number",
                "example": 988887777
              },
              "role": {
                "type": "string",
                "enum": ["customer", "shop"],
                "default": "shop"
              },
              "createdAt": {
                "type": "string",
                "example": "2023-04-03T00:25:32.189Z"
              },
              "updatedAt": {
                "type": "string",
                "example": "2023-04-03T00:25:32.189Z"
              }
            }
          },
          "addressInfo": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 1
              },
              "number": {
                "type": "integer",
                "example": 71
              },
              "street": {
                "type": "string",
                "example": "Veneza"
              },
              "city": {
                "type": "string",
                "example": "Italia"
              },
              "state": {
                "type": "string",
                "example": "Idont know"
              },
              "country": {
                "type": "string",
                "example": "Brazil"
              },
              "zipcode": {
                "type": "number",
                "example": 35772598
              },
              "lat": {
                "type": "string",
                "example": "35.702206"
              },
              "long": {
                "type": "string",
                "example": "139.774139"
              },
              "createdAt": {
                "type": "string",
                "example": "2023-04-03T00:25:32.189Z"
              },
              "updatedAt": {
                "type": "string",
                "example": "2023-04-03T00:25:32.189Z"
              }
            }
          }
        }
      },
      "UserLoginSchema": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "example": "maquinabeloz@tute.italia"
          },
          "password": {
            "type": "string",
            "example": "safeppaswordnobodywillknowhihi"
          }
        }
      },
      "UserLoginRes": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "example": "superencryptedandsafeaccestokenhihi"
          },
          "userInfo": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 1
              },
              "name": {
                "type": "string",
                "example": "Fernando Virgulini"
              },
              "email": {
                "type": "string",
                "example": "maquinabeloz@tute.italia"
              },
              "phoneNumber": {
                "type": "number",
                "example": 988887777
              },
              "role": {
                "type": "string",
                "enum": ["customer", "shop"],
                "example": "customer"
              },
              "photoUrl": {
                "type": "string",
                "nullable": true,
                "example": "www.imgur.ui/something.bop"
              },
              "birthday": {
                "type": "string",
                "nullable": true,
                "example": "2023-04-03T00:25:32.189Z"
              },
              "createdAt": {
                "type": "string",
                "example": "2023-04-03T00:25:32.189Z"
              },
              "updatedAt": {
                "type": "string",
                "example": "2023-04-03T00:25:32.189Z"
              }
            }
          }
        }
      },
      "UserUpdateSchema": {
        "type": "object",
        "required": ["id"],
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Fernando Virgulini"
          },
          "email": {
            "type": "string",
            "example": "maquinabeloz@tute.italia"
          },
          "phoneNumber": {
            "type": "number",
            "example": 988887777
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "UserUpdateRes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Fernando Virgulini"
          },
          "email": {
            "type": "string",
            "example": "maquinabeloz@tute.italia"
          },
          "phoneNumber": {
            "type": "number",
            "example": 988887777
          },
          "role": {
            "type": "string",
            "enum": ["customer", "shop"],
            "example": "customer"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "UserUpdateTokenSchema": {
        "type": "object",
        "required": ["id"],
        "properties": {
          "id": {
            "type": "string",
            "example": 1
          }
        }
      },
      "UserUpdateTokenRes": {
        "title": "New Access Token",
        "type": "string",
        "example": "newAccessToken"
      },
      "GeneralCategoryCreateSchema": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "example": "Pizzaria"
          }
        }
      },
      "GeneralCategoryCreateRes": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Pizzaria"
          },
          "id": {
            "type": "integer",
            "example": 1
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "GeneralCategoryListRes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "Pizzaria"
            },
            "id": {
              "type": "integer",
              "example": 1
            },
            "createdAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            },
            "updatedAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            }
          }
        }
      },
      "GeneralCategoryGetRes": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Pizzaria"
          },
          "id": {
            "type": "integer",
            "example": 1
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "GeneralCategoryUpdateSchema": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "example": "Pizzaria"
          },
          "id": {
            "type": "integer",
            "example": 1
          }
        }
      },
      "GeneralCategoryUpdateRes": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Pizzaria"
          },
          "id": {
            "type": "integer",
            "example": 1
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "GeneralCategoryDeleteRes": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Pizzaria"
          },
          "id": {
            "type": "integer",
            "example": 1
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "GeneralCategorySetSchema": {
        "type": "object",
        "properties": {
          "shopId": {
            "type": "integer",
            "example": 1
          },
          "generalCategoryId": {
            "type": "integer",
            "example": [1, 2, 3, 4]
          }
        }
      },
      "GeneralCategorySetRes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "Pizzaria"
            },
            "id": {
              "type": "integer",
              "example": [1, 2, 3, 4]
            }
          }
        }
      },
      "GeneralCategoryRemoveSchema": {
        "type": "object",
        "properties": {
          "shopId": {
            "type": "integer",
            "example": 1
          },
          "generalCategoryId": {
            "type": "integer",
            "example": [1, 2, 3, 4]
          }
        }
      },
      "GeneralCategoryRemoveRes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "Pizzaria"
            },
            "id": {
              "type": "integer",
              "example": [1, 2, 3, 4]
            }
          }
        }
      },
      "GeneralCategoryShopListRes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "Pizzaria"
            },
            "id": {
              "type": "integer",
              "example": 1
            }
          }
        }
      },
      "ItemCategoryCreateSchema": {
        "type": "object",
        "required": ["name, shopId"],
        "properties": {
          "name": {
            "type": "string",
            "example": "Bebidas geladas"
          },
          "shopId": {
            "type": "integer",
            "example": 1
          }
        }
      },
      "ItemCategoryCreateRes": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Bebidas geladas"
          },
          "id": {
            "type": "integer",
            "example": 1
          },
          "shopId": {
            "type": "integer",
            "example": 1
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "ItemCategoryGetRes": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Bebidas geladas"
          },
          "id": {
            "type": "integer",
            "example": 1
          },
          "shopId": {
            "type": "integer",
            "example": 1
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "ItemCategoryListRes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "Bebidas geladas"
            },
            "id": {
              "type": "integer",
              "example": 1
            },
            "shopId": {
              "type": "integer",
              "example": 1
            },
            "createdAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            },
            "updatedAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            }
          }
        }
      },
      "ItemCategorySetSchema": {
        "type": "object",
        "properties": {
          "itemId": {
            "type": "integer",
            "example": 1
          },
          "itemCategoryId": {
            "type": "integer",
            "example": 2
          }
        }
      },
      "ItemCategorySetRes": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Bebidas quentes"
          },
          "id": {
            "type": "integer",
            "example": 2
          },
          "shopId": {
            "type": "integer",
            "example": 1
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "ItemCategoryRemoveSchema": {
        "type": "object",
        "properties": {
          "itemId": {
            "type": "integer",
            "example": 1
          },
          "itemCategoryId": {
            "type": "integer",
            "example": 2
          }
        }
      },
      "ItemCategoryRemoveRes": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Bebidas quentes"
          },
          "id": {
            "type": "integer",
            "example": 2
          },
          "shopId": {
            "type": "integer",
            "example": 1
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "CustomerCreateSchema": {
        "type": "object",
        "required": ["userInfo"],
        "properties": {
          "userInfo": {
            "type": "object",
            "required": ["name", "email", "password"],
            "properties": {
              "name": {
                "type": "string",
                "example": "Fernando Virgulini"
              },
              "email": {
                "type": "string",
                "example": "maquinabeloz@tute.italia"
              },
              "password": {
                "type": "string",
                "example": "safeppaswordnobodywillknowhihi"
              },
              "phoneNumber": {
                "type": "number",
                "example": 988887777
              },
              "role": {
                "type": "string",
                "enum": ["customer", "shop"],
                "default": "customer"
              }
            }
          },
          "customerInfo": {
            "type": "object",
            "properties": {
              "photoUrl": {
                "type": "string",
                "example": "Fernando Virgulini"
              },
              "birthday": {
                "type": "string",
                "example": "2002-04-03T00:25:32.189Z"
              }
            }
          }
        }
      },
      "CustomerCreateRes": {
        "type": "object",
        "properties": {
          "photoUrl": {
            "type": "string",
            "example": "Fernando Virgulini"
          },
          "birthday": {
            "type": "string",
            "example": "2002-04-03T00:25:32.189Z"
          },
          "userId": {
            "type": "number",
            "example": 1
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "userInfo": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 1
              },
              "name": {
                "type": "string",
                "example": "Fernando Virgulini"
              },
              "email": {
                "type": "string",
                "example": "maquinabeloz@tute.italia"
              },
              "password": {
                "type": "string",
                "example": "safeppaswordnobodywillknowhihi"
              },
              "phoneNumber": {
                "type": "number",
                "example": 988887777
              },
              "role": {
                "type": "string",
                "enum": ["customer", "shop"],
                "default": "customer"
              },
              "createdAt": {
                "type": "string",
                "example": "2023-04-03T00:25:32.189Z"
              },
              "updatedAt": {
                "type": "string",
                "example": "2023-04-03T00:25:32.189Z"
              }
            }
          }
        }
      },
      "CustomerListRes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "photoUrl": {
              "type": "string",
              "example": "https://some.link"
            },
            "birthday": {
              "type": "string",
              "example": "2002-04-03T00:25:32.189Z"
            },
            "userId": {
              "type": "number",
              "example": 1
            },
            "createdAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            },
            "updatedAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            },
            "userInfo": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "example": "Fernando Virgulini"
                },
                "email": {
                  "type": "string",
                  "example": "maquinabeloz@tute.italia"
                },
                "password": {
                  "type": "string",
                  "example": "safeppaswordnobodywillknowhihi"
                },
                "phoneNumber": {
                  "type": "number",
                  "example": 988887777
                },
                "role": {
                  "type": "string",
                  "enum": ["customer", "shop"],
                  "default": "customer"
                },
                "createdAt": {
                  "type": "string",
                  "example": "2023-04-03T00:25:32.189Z"
                },
                "updatedAt": {
                  "type": "string",
                  "example": "2023-04-03T00:25:32.189Z"
                }
              }
            }
          }
        }
      },
      "CustomerUpdateSchema": {
        "type": "object",
        "required": ["userId"],
        "properties": {
          "userId": {
            "type": "integer",
            "example": 1
          },
          "photoUrl": {
            "type": "string",
            "example": "https://idont.know"
          },
          "birthday": {
            "type": "string",
            "example": "2002-04-03T00:25:32.189Z"
          }
        }
      },
      "CustomerUpdateRes": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "example": 1
          },
          "photoUrl": {
            "type": "string",
            "example": "https://idont.know"
          },
          "birthday": {
            "type": "string",
            "example": "2002-04-03T00:25:32.189Z"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "CustomerGetOrderRes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "example": 1
            },
            "groupId": {
              "type": "integer",
              "example": 123456789
            },
            "customer": {
              "type": "object",
              "properties": {
                "photoUrl": {
                  "type": "string",
                  "example": "Fernando Virgulini"
                },
                "birthday": {
                  "type": "string",
                  "example": "2002-04-03T00:25:32.189Z"
                },
                "userId": {
                  "type": "number",
                  "example": 1
                },
                "createdAt": {
                  "type": "string",
                  "example": "2023-04-03T00:25:32.189Z"
                },
                "updatedAt": {
                  "type": "string",
                  "example": "2023-04-03T00:25:32.189Z"
                },
                "userInfo": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "example": "Fernando Virgulini"
                    },
                    "email": {
                      "type": "string",
                      "example": "maquinabeloz@tute.italia"
                    },
                    "phoneNumber": {
                      "type": "number",
                      "example": 988887777
                    },
                    "role": {
                      "type": "string",
                      "enum": ["customer", "shop"],
                      "default": "customer"
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2023-04-03T00:25:32.189Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2023-04-03T00:25:32.189Z"
                    }
                  }
                }
              }
            },
            "shop": {
              "type": "object",
              "properties": {
                "tables": {
                  "type": "integer",
                  "example": 8
                },
                "userId": {
                  "type": "integer",
                  "example": 1
                },
                "addressId": {
                  "type": "integer",
                  "example": 1
                },
                "createdAt": {
                  "type": "string",
                  "example": "2023-04-03T00:25:32.189Z"
                },
                "updatedAt": {
                  "type": "string",
                  "example": "2023-04-03T00:25:32.189Z"
                },
                "categories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "example": 1
                      },
                      "name": {
                        "type": "string",
                        "example": "Pizzaria"
                      }
                    }
                  }
                },
                "userInfo": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "example": "Fernando Virgulini"
                    },
                    "email": {
                      "type": "string",
                      "example": "maquinabeloz@tute.italia"
                    },
                    "phoneNumber": {
                      "type": "number",
                      "example": 988887777
                    },
                    "role": {
                      "type": "string",
                      "enum": ["customer", "shop"],
                      "default": "shop"
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2023-04-03T00:25:32.189Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2023-04-03T00:25:32.189Z"
                    }
                  }
                },
                "addressInfo": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "number": {
                      "type": "integer",
                      "example": 71
                    },
                    "street": {
                      "type": "string",
                      "example": "Veneza"
                    },
                    "city": {
                      "type": "string",
                      "example": "Italia"
                    },
                    "state": {
                      "type": "string",
                      "example": "Idont know"
                    },
                    "country": {
                      "type": "string",
                      "example": "Brazil"
                    },
                    "zipcode": {
                      "type": "number",
                      "example": 35772598
                    },
                    "lat": {
                      "type": "string",
                      "example": "35.702206"
                    },
                    "long": {
                      "type": "string",
                      "example": "139.774139"
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2023-04-03T00:25:32.189Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2023-04-03T00:25:32.189Z"
                    }
                  }
                }
              }
            },
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 1
                  },
                  "name": {
                    "type": "string",
                    "example": "Jane Doe"
                  },
                  "price": {
                    "type": "number",
                    "example": 1.99
                  },
                  "quantity": {
                    "type": "number",
                    "example": 5
                  },
                  "total": {
                    "type": "number",
                    "example": 9.95
                  },
                  "categoryId": {
                    "type": "integer",
                    "example": 1
                  },
                  "description": {
                    "type": "string",
                    "example": "Bolinho de murango"
                  },
                  "temperature": {
                    "type": "string",
                    "example": "cold"
                  },
                  "createdAt": {
                    "type": "string",
                    "example": "2023-04-03T00:25:32.189Z"
                  },
                  "updatedAt": {
                    "type": "string",
                    "example": "2023-04-03T00:25:32.189Z"
                  }
                }
              }
            },
            "tableId": {
              "type": "integer",
              "example": 3
            },
            "total": {
              "type": "integer",
              "example": 88.78
            },
            "status": {
              "type": "string",
              "example": "open"
            },
            "note": {
              "type": "string",
              "example": "No romcom please"
            },
            "createdAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            },
            "updatedAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            }
          }
        }
      },
      "ShopCreateSchema": {
        "type": "object",
        "required": ["userInfo, addressInfo"],
        "properties": {
          "userInfo": {
            "type": "object",
            "required": ["name", "email", "password"],
            "properties": {
              "name": {
                "type": "string",
                "example": "Fernando Virgulini"
              },
              "email": {
                "type": "string",
                "example": "maquinabeloz@tute.italia"
              },
              "password": {
                "type": "string",
                "example": "safeppaswordnobodywillknowhihi"
              },
              "phoneNumber": {
                "type": "number",
                "example": 988887777
              },
              "role": {
                "type": "string",
                "enum": ["customer", "shop"],
                "default": "shop"
              }
            }
          },
          "shopInfo": {
            "type": "object",
            "properties": {
              "tables": {
                "type": "integer",
                "nullable": true,
                "example": 8
              },
              "photoUrl": {
                "type": "string",
                "nullable": true,
                "example": "www.imgur.com/cutecatphoto.bonk"
              }
            }
          },
          "addressInfo": {
            "$ref": "#/components/schemas/AddressCreateSchema"
          }
        }
      },
      "ShopCreateRes": {
        "type": "object",
        "properties": {
          "userInfo": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 1
              },
              "name": {
                "type": "string",
                "example": "Fernando Virgulini"
              },
              "email": {
                "type": "string",
                "example": "maquinabeloz@tute.italia"
              },
              "password": {
                "type": "string",
                "example": "safeppaswordnobodywillknowhihi"
              },
              "phoneNumber": {
                "type": "number",
                "example": 988887777
              },
              "role": {
                "type": "string",
                "enum": ["customer", "shop"],
                "default": "shop"
              },
              "createdAt": {
                "type": "string",
                "example": "2023-04-03T00:25:32.189Z"
              },
              "updatedAt": {
                "type": "string",
                "example": "2023-04-03T00:25:32.189Z"
              }
            }
          },
          "shopInfo": {
            "type": "object",
            "properties": {
              "tables": {
                "type": "integer",
                "example": 8
              },
              "userId": {
                "type": "integer",
                "example": 1
              },
              "addressId": {
                "type": "integer",
                "example": 1
              },
              "createdAt": {
                "type": "string",
                "example": "2023-04-03T00:25:32.189Z"
              },
              "updatedAt": {
                "type": "string",
                "example": "2023-04-03T00:25:32.189Z"
              }
            }
          },
          "addressInfo": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 1
              },
              "number": {
                "type": "integer",
                "example": 71
              },
              "street": {
                "type": "string",
                "example": "Veneza"
              },
              "city": {
                "type": "string",
                "example": "Italia"
              },
              "state": {
                "type": "string",
                "example": "Idont know"
              },
              "country": {
                "type": "string",
                "example": "Brazil"
              },
              "zipcode": {
                "type": "number",
                "example": 35772598
              },
              "lat": {
                "type": "string",
                "example": "35.702206"
              },
              "long": {
                "type": "string",
                "example": "139.774139"
              },
              "createdAt": {
                "type": "string",
                "example": "2023-04-03T00:25:32.189Z"
              },
              "updatedAt": {
                "type": "string",
                "example": "2023-04-03T00:25:32.189Z"
              }
            }
          }
        }
      },
      "ShopListRes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "Fernando Virgulini"
            },
            "user_id": {
              "type": "integer",
              "example": 1
            },
            "address_id": {
              "type": "integer",
              "example": 1
            },
            "tables": {
              "type": "integer",
              "example": 8
            },
            "number": {
              "type": "integer",
              "example": 71
            },
            "street": {
              "type": "string",
              "example": "Veneza"
            },
            "city": {
              "type": "string",
              "example": "Italia"
            },
            "neighborhood": {
              "type": "string",
              "example": "Virgulini"
            },
            "state": {
              "type": "string",
              "example": "Idont know"
            },
            "country": {
              "type": "string",
              "example": "Brazil"
            },
            "lat": {
              "type": "string",
              "example": "35.702206"
            },
            "long": {
              "type": "string",
              "example": "139.774139"
            },
            "email": {
              "type": "string",
              "example": "maquinabeloz@tute.italia"
            },
            "phone_number": {
              "type": "number",
              "example": 99997777
            },
            "category_name": {
              "type": "string",
              "example": "Pizzaria"
            },
            "category_id": {
              "type": "integer",
              "example": 1
            },
            "rating": {
              "type": "integer",
              "example": 4.58
            },
            "createdAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            },
            "updatedAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            }
          }
        }
      },
      "ShopGetMenuRes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "example": 1
            },
            "name": {
              "type": "string",
              "example": "Jane Doe"
            },
            "price": {
              "type": "number",
              "example": 1.99
            },
            "shopId": {
              "type": "integer",
              "example": 1
            },
            "category": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Isekai"
                },
                "id": {
                  "type": "integer",
                  "example": 1
                },
                "shopId": {
                  "type": "integer",
                  "example": 1
                },
                "createdAt": {
                  "type": "string",
                  "example": "2023-04-03T00:25:32.189Z"
                },
                "updatedAt": {
                  "type": "string",
                  "example": "2023-04-03T00:25:32.189Z"
                }
              }
            },
            "description": {
              "type": "string",
              "example": "Bolo de murango"
            },
            "temperature": {
              "type": "string",
              "enum": ["cold", "hot"]
            },
            "createdAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            },
            "updatedAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            }
          }
        }
      },
      "ShopGetQrCodeRes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "example": 1
            },
            "shopId": {
              "type": "integer",
              "example": 1
            },
            "table": {
              "type": "integer",
              "example": 1
            },
            "isOccupied": {
              "type": "boolean",
              "default": false
            },
            "qrCodeUrl": {
              "type": "string",
              "example": "https://image-charts.com/chart?chs=350x350&cht=qr&choe=UTF-8&icqrf=F3484F&chld=M&chof=.png&chl={shopId:1,table:1}"
            },
            "createdAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            },
            "updatedAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            }
          }
        }
      },
      "ShopGetItemCategoryRes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "Bebidas geladas"
            },
            "id": {
              "type": "integer",
              "example": 1
            },
            "shopId": {
              "type": "integer",
              "example": 1
            },
            "createdAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            },
            "updatedAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            }
          }
        }
      },
      "ShopGetSchedules": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "shop_id": {
              "type": "integer",
              "example": 1
            },
            "day": {
              "type": "integer",
              "example": 0
            },
            "openening": {
              "type": "integer",
              "example": 8
            },
            "closing": {
              "type": "integer",
              "example": 22
            },
            "createdAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            },
            "updatedAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            }
          }
        }
      },
      "ShopGetOrderRes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "example": 1
            },
            "groupId": {
              "type": "integer",
              "example": 123456789
            },
            "shop": {
              "type": "object",
              "properties": {
                "table": {
                  "type": "integer",
                  "example": 8
                },
                "userId": {
                  "type": "integer",
                  "example": 1
                },
                "addressId": {
                  "type": "integer",
                  "example": 1
                },
                "createdAt": {
                  "type": "string",
                  "example": "2023-04-03T00:25:32.189Z"
                },
                "updatedAt": {
                  "type": "string",
                  "example": "2023-04-03T00:25:32.189Z"
                },
                "categories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "example": 1
                      },
                      "name": {
                        "type": "string",
                        "example": "Pizzaria"
                      }
                    }
                  }
                },
                "userInfo": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "example": "Fernando Virgulini"
                    },
                    "email": {
                      "type": "string",
                      "example": "maquinabeloz@tute.italia"
                    },
                    "phoneNumber": {
                      "type": "number",
                      "example": 988887777
                    },
                    "role": {
                      "type": "string",
                      "enum": ["customer", "shop"],
                      "default": "shop"
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2023-04-03T00:25:32.189Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2023-04-03T00:25:32.189Z"
                    }
                  }
                },
                "addressInfo": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "number": {
                      "type": "integer",
                      "example": 71
                    },
                    "street": {
                      "type": "string",
                      "example": "Veneza"
                    },
                    "city": {
                      "type": "string",
                      "example": "Italia"
                    },
                    "state": {
                      "type": "string",
                      "example": "Idont know"
                    },
                    "country": {
                      "type": "string",
                      "example": "Brazil"
                    },
                    "zipcode": {
                      "type": "number",
                      "example": 35772598
                    },
                    "lat": {
                      "type": "string",
                      "example": "35.702206"
                    },
                    "long": {
                      "type": "string",
                      "example": "139.774139"
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2023-04-03T00:25:32.189Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2023-04-03T00:25:32.189Z"
                    }
                  }
                }
              }
            },
            "customer": {
              "type": "object",
              "properties": {
                "photoUrl": {
                  "type": "string",
                  "example": "Fernando Virgulini"
                },
                "birthday": {
                  "type": "string",
                  "example": "2002-04-03T00:25:32.189Z"
                },
                "userId": {
                  "type": "number",
                  "example": 1
                },
                "createdAt": {
                  "type": "string",
                  "example": "2023-04-03T00:25:32.189Z"
                },
                "updatedAt": {
                  "type": "string",
                  "example": "2023-04-03T00:25:32.189Z"
                },
                "userInfo": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "example": "Fernando Virgulini"
                    },
                    "email": {
                      "type": "string",
                      "example": "maquinabeloz@tute.italia"
                    },
                    "phoneNumber": {
                      "type": "number",
                      "example": 988887777
                    },
                    "role": {
                      "type": "string",
                      "enum": ["customer", "shop"],
                      "default": "customer"
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2023-04-03T00:25:32.189Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2023-04-03T00:25:32.189Z"
                    }
                  }
                }
              }
            },
            "tableId": {
              "type": "integer",
              "example": 3
            },
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 1
                  },
                  "name": {
                    "type": "string",
                    "example": "Jane Doe"
                  },
                  "price": {
                    "type": "number",
                    "example": 1.99
                  },
                  "quantity": {
                    "type": "number",
                    "example": 5
                  },
                  "total": {
                    "type": "number",
                    "example": 9.95
                  },
                  "categoryId": {
                    "type": "integer",
                    "example": 1
                  },
                  "description": {
                    "type": "string",
                    "example": "Bolinho de murango"
                  },
                  "temperature": {
                    "type": "string",
                    "example": "cold"
                  },
                  "createdAt": {
                    "type": "string",
                    "example": "2023-04-03T00:25:32.189Z"
                  },
                  "updatedAt": {
                    "type": "string",
                    "example": "2023-04-03T00:25:32.189Z"
                  }
                }
              }
            },
            "total": {
              "type": "integer",
              "example": 88.78
            },
            "status": {
              "type": "string",
              "example": "open"
            },
            "note": {
              "type": "string",
              "example": "No romcom please"
            },
            "createdAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            },
            "updatedAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            }
          }
        }
      },
      "ShopGetReviewRes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "shopId": {
              "type": "integer",
              "example": 1
            },
            "customer": {
              "type": "integer",
              "example": 2
            },
            "rating": {
              "type": "integer",
              "example": 4.58
            },
            "comment": {
              "type": "string",
              "example": "The mini torta is expansive"
            },
            "createdAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            },
            "updatedAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            }
          }
        }
      },
      "ShopUpdateSchema": {
        "type": "object",
        "required": ["userId"],
        "properties": {
          "userId": {
            "type": "integer",
            "example": 1
          },
          "tables": {
            "type": "integer",
            "example": 8
          },
          "photoUrl": {
            "type": "string",
            "example": "www.somecat.picture"
          }
        }
      },
      "ShopUpdateRes": {
        "type": "object",
        "properties": {
          "tables": {
            "type": "integer",
            "example": 8
          },
          "userId": {
            "type": "integer",
            "example": 1
          },
          "addressId": {
            "type": "integer",
            "example": 1
          },
          "photoUrl": {
            "type": "string",
            "example": "www.somecat.picture"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "ItemCreateSchema": {
        "type": "object",
        "required": ["name", "shopId", "price"],
        "properties": {
          "name": {
            "type": "string",
            "example": "Jane Doe"
          },
          "price": {
            "type": "number",
            "example": 1.99
          },
          "shopId": {
            "type": "integer",
            "example": 1
          },
          "categoryId": {
            "type": "number",
            "example": 1
          },
          "description": {
            "type": "string",
            "example": "Bolo de murango"
          },
          "temperature": {
            "type": "string",
            "enum": ["cold", "hot"]
          }
        }
      },
      "ItemCreateRes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Jane Doe"
          },
          "price": {
            "type": "number",
            "example": 1.99
          },
          "categoryId": {
            "type": "integer",
            "example": 1
          },
          "description": {
            "type": "string",
            "example": "Bolinho de murango"
          },
          "temperature": {
            "type": "string",
            "example": "cold"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "ItemListRes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "example": 1
            },
            "name": {
              "type": "string",
              "example": "Jane Doe"
            },
            "price": {
              "type": "number",
              "example": 1.99
            },
            "shopId": {
              "type": "integer",
              "example": 1
            },
            "categoryId": {
              "type": "integer",
              "example": 1
            },
            "description": {
              "type": "string",
              "example": "Bolo de murango"
            },
            "temperature": {
              "type": "string",
              "enum": ["cold", "hot"]
            },
            "createdAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            },
            "updatedAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            }
          }
        }
      },
      "ItemUpdateSchema": {
        "type": "object",
        "required": ["id"],
        "properties": {
          "name": {
            "type": "string",
            "example": "Jane Doe"
          },
          "id": {
            "type": "integer",
            "example": 1
          },
          "price": {
            "type": "number",
            "example": 1.99
          },
          "categoryId": {
            "type": "number",
            "example": 1
          },
          "description": {
            "type": "string",
            "example": "Bolo de murango"
          },
          "temperature": {
            "type": "string",
            "enum": ["cold", "hot"]
          }
        }
      },
      "ItemUpadteRes": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Jane Doe"
          },
          "id": {
            "type": "integer",
            "example": 1
          },
          "price": {
            "type": "number",
            "example": 1.99
          },
          "categoryId": {
            "type": "number",
            "example": 1
          },
          "description": {
            "type": "string",
            "example": "Bolo de murango"
          },
          "temperature": {
            "type": "string",
            "enum": ["cold", "hot"]
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "ItemGetRes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Jane Doe"
          },
          "price": {
            "type": "number",
            "example": 1.99
          },
          "categoryId": {
            "type": "integer",
            "example": 1
          },
          "description": {
            "type": "string",
            "example": "Bolinho de murango"
          },
          "temperature": {
            "type": "string",
            "example": "cold"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "ItemDeleteRes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Jane Doe"
          },
          "price": {
            "type": "number",
            "example": 1.99
          },
          "categoryId": {
            "type": "integer",
            "example": 1
          },
          "description": {
            "type": "string",
            "example": "Bolinho de murango"
          },
          "temperature": {
            "type": "string",
            "example": "cold"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "QrCodeCreateSchema": {
        "type": "object",
        "required": ["shopId", "table"],
        "properties": {
          "shopId": {
            "type": "integer",
            "example": 1
          },
          "table": {
            "type": "integer",
            "example": 1
          }
        }
      },
      "QrCodeCreateRes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "shopId": {
            "type": "integer",
            "example": 1
          },
          "table": {
            "type": "integer",
            "example": 1
          },
          "isOccupied": {
            "type": "boolean",
            "default": false
          },
          "qrCodeUrl": {
            "type": "string",
            "example": "https://image-charts.com/chart?chs=350x350&cht=qr&choe=UTF-8&icqrf=F3484F&chld=M&chof=.png&chl={shopId:1,table:1}"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "QrCodeListRes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "example": 1
            },
            "shopId": {
              "type": "integer",
              "example": 1
            },
            "table": {
              "type": "integer",
              "example": 1
            },
            "isOccupied": {
              "type": "boolean",
              "default": false
            },
            "qrCodeUrl": {
              "type": "string",
              "example": "https://image-charts.com/chart?chs=350x350&cht=qr&choe=UTF-8&icqrf=F3484F&chld=M&chof=.png&chl={shopId:1,table:1}"
            },
            "createdAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            },
            "updatedAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            }
          }
        }
      },
      "QrCodeGetRes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "shopId": {
            "type": "integer",
            "example": 1
          },
          "table": {
            "type": "integer",
            "example": 1
          },
          "isOccupied": {
            "type": "boolean",
            "default": false
          },
          "qrCodeUrl": {
            "type": "string",
            "example": "https://image-charts.com/chart?chs=350x350&cht=qr&choe=UTF-8&icqrf=F3484F&chld=M&chof=.png&chl={shopId:1,table:1}"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "QrCodeDeleteRes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "shopId": {
            "type": "integer",
            "example": 1
          },
          "table": {
            "type": "integer",
            "example": 1
          },
          "isOccupied": {
            "type": "boolean",
            "default": false
          },
          "qrCodeUrl": {
            "type": "string",
            "example": "https://image-charts.com/chart?chs=350x350&cht=qr&choe=UTF-8&icqrf=F3484F&chld=M&chof=.png&chl={shopId:1,table:1}"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "OrderCreateSchema": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "shopId",
            "customerId",
            "itemId",
            "quantity",
            "total",
            "tableId"
          ],
          "properties": {
            "shopId": {
              "type": "integer",
              "example": 1
            },
            "customerId": {
              "type": "integer",
              "example": 5
            },
            "itemId": {
              "type": "integer",
              "example": 2
            },
            "quantity": {
              "type": "integer",
              "example": 2
            },
            "total": {
              "type": "integer",
              "example": 88.78
            },
            "tableId": {
              "type": "integer",
              "example": 3
            },
            "note": {
              "type": "string",
              "example": "No romcom please"
            }
          }
        }
      },
      "OrderCreateRes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "groupId": {
            "type": "integer",
            "example": 123456789
          },
          "shopId": {
            "type": "integer",
            "example": 1
          },
          "customerId": {
            "type": "integer",
            "example": 5
          },
          "tableId": {
            "type": "integer",
            "example": 3
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "itemId": {
                  "type": "integer",
                  "example": 2
                },
                "quantity": {
                  "type": "integer",
                  "example": 2
                },
                "total": {
                  "type": "integer",
                  "example": 88.78
                }
              }
            }
          },
          "total": {
            "type": "integer",
            "example": 88.78
          },
          "status": {
            "type": "string",
            "example": "open"
          },
          "note": {
            "type": "string",
            "example": "No romcom please"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "OrderListRes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "example": 1
            },
            "groupId": {
              "type": "integer",
              "example": 123456789
            },
            "shopId": {
              "type": "integer",
              "example": 1
            },
            "customerId": {
              "type": "integer",
              "example": 5
            },
            "tableId": {
              "type": "integer",
              "example": 3
            },
            "itemId": {
              "type": "integer",
              "example": 2
            },
            "total": {
              "type": "integer",
              "example": 88.78
            },
            "status": {
              "type": "string",
              "example": "open"
            },
            "note": {
              "type": "string",
              "example": "No romcom please"
            },
            "createdAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            },
            "updatedAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            }
          }
        }
      },
      "OrderGetRes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "groupId": {
            "type": "integer",
            "example": 123456789
          },
          "shopId": {
            "type": "integer",
            "example": 1
          },
          "customerId": {
            "type": "integer",
            "example": 5
          },
          "tableId": {
            "type": "integer",
            "example": 3
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "itemId": {
                  "type": "integer",
                  "example": 2
                },
                "quantity": {
                  "type": "integer",
                  "example": 2
                },
                "total": {
                  "type": "integer",
                  "example": 88.78
                }
              }
            }
          },
          "total": {
            "type": "integer",
            "example": 88.78
          },
          "status": {
            "type": "string",
            "example": "open"
          },
          "note": {
            "type": "string",
            "example": "No romcom please"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "OrderGetByTableRes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "groupId": {
            "type": "integer",
            "example": 123456789
          },
          "shopId": {
            "type": "integer",
            "example": 1
          },
          "customerId": {
            "type": "integer",
            "example": 5
          },
          "tableId": {
            "type": "integer",
            "example": 3
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "itemId": {
                  "type": "integer",
                  "example": 2
                },
                "quantity": {
                  "type": "integer",
                  "example": 2
                },
                "total": {
                  "type": "integer",
                  "example": 88.78
                }
              }
            }
          },
          "total": {
            "type": "integer",
            "example": 88.78
          },
          "status": {
            "type": "string",
            "example": "open"
          },
          "note": {
            "type": "string",
            "example": "No romcom please"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "OrderCompleteRes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "groupId": {
            "type": "integer",
            "example": 123456789
          },
          "shopId": {
            "type": "integer",
            "example": 1
          },
          "customerId": {
            "type": "integer",
            "example": 5
          },
          "tableId": {
            "type": "integer",
            "example": 3
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "itemId": {
                  "type": "integer",
                  "example": 2
                },
                "quantity": {
                  "type": "integer",
                  "example": 2
                },
                "total": {
                  "type": "integer",
                  "example": 88.78
                }
              }
            }
          },
          "total": {
            "type": "integer",
            "example": 88.78
          },
          "status": {
            "type": "string",
            "example": "closed"
          },
          "note": {
            "type": "string",
            "example": "No romcom please"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "OrderCancelRes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "groupId": {
            "type": "integer",
            "example": 123456789
          },
          "shopId": {
            "type": "integer",
            "example": 1
          },
          "customerId": {
            "type": "integer",
            "example": 5
          },
          "tableId": {
            "type": "integer",
            "example": 3
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "itemId": {
                  "type": "integer",
                  "example": 2
                },
                "quantity": {
                  "type": "integer",
                  "example": 2
                },
                "total": {
                  "type": "integer",
                  "example": 88.78
                }
              }
            }
          },
          "total": {
            "type": "integer",
            "example": 88.78
          },
          "status": {
            "type": "string",
            "example": "cancelled"
          },
          "note": {
            "type": "string",
            "example": "No romcom please"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "ScheduleSetSchema": {
        "type": "array",
        "items": {
          "type": "object",
          "required": ["shop_id", "day", "openening", "closing"],
          "properties": {
            "shop_id": {
              "type": "integer",
              "example": 1
            },
            "day": {
              "type": "integer",
              "example": 0
            },
            "openening": {
              "type": "integer",
              "example": 8
            },
            "closing": {
              "type": "integer",
              "example": 22
            }
          }
        }
      },
      "ScheduleSetRes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "shop_id": {
              "type": "integer",
              "example": 1
            },
            "day": {
              "type": "integer",
              "example": 0
            },
            "openening": {
              "type": "integer",
              "example": 8
            },
            "closing": {
              "type": "integer",
              "example": 22
            },
            "createdAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            },
            "updatedAt": {
              "type": "string",
              "example": "2023-04-03T00:25:32.189Z"
            }
          }
        }
      },
      "ReviewCreateSchema": {
        "type": "object",
        "required": ["shopId", "customerId", "rating"],
        "properties": {
          "shopId": {
            "type": "integer",
            "example": 1
          },
          "customer": {
            "type": "integer",
            "example": 2
          },
          "rating": {
            "type": "integer",
            "example": 4.58
          },
          "comment": {
            "type": "string",
            "example": "The mini torta is expansive"
          }
        }
      },
      "ReviewCreateRes": {
        "type": "object",
        "properties": {
          "shopId": {
            "type": "integer",
            "example": 1
          },
          "customer": {
            "type": "integer",
            "example": 2
          },
          "rating": {
            "type": "integer",
            "example": 4.58
          },
          "comment": {
            "type": "string",
            "example": "The mini torta is expansive"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "ReviewUpdateSchema": {
        "type": "object",
        "required": ["id"],
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "rating": {
            "type": "integer",
            "example": 2.58
          },
          "comment": {
            "type": "string",
            "example": "The mini torta is tasty"
          }
        }
      },
      "ReviewUpdateRes": {
        "type": "object",
        "properties": {
          "shopId": {
            "type": "integer",
            "example": 1
          },
          "customer": {
            "type": "integer",
            "example": 2
          },
          "rating": {
            "type": "integer",
            "example": 2.58
          },
          "comment": {
            "type": "string",
            "example": "The mini torta is tasty"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "ReviewDeleteRes": {
        "type": "object",
        "properties": {
          "shopId": {
            "type": "integer",
            "example": 1
          },
          "customer": {
            "type": "integer",
            "example": 2
          },
          "rating": {
            "type": "integer",
            "example": 2.58
          },
          "comment": {
            "type": "string",
            "example": "The mini torta is tasty"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-04-03T00:25:32.189Z"
          }
        }
      },
      "NotFoundError": {
        "type": "string",
        "default": "Not found"
      },
      "ConflictError": {
        "type": "string",
        "default": "Already exists"
      },
      "UnauthorizedError": {
        "type": "string",
        "default": "Not authorized"
      },
      "ForbiddenError": {
        "type": "string",
        "default": "Not enough privileges"
      },
      "BadRequestError": {
        "type": "string",
        "default": "Bad parameters"
      }
    }
  }
}
